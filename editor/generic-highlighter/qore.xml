<?xml version="1.0" encoding="UTF-8"?>
<language name="Qore"
          version="0.8.13"
          section="Scripts"
          kateversion="5.0"
          extensions="*.q*"
          mimetype="application/x-qore;text/x-qore"
          author="qore generator from qore.tmLanguage.json"
          >
    <highlighting>
        <contexts>
            <context attribute="normal text" name="normal text" lineEndContext="#stay">

                <!-- string handling -->
                <DetectChar attribute="string" context="string" char="&quot;" beginRegion="String" />
                <DetectChar attribute="string" context="simple_string" char="'" beginRegion="String" />
                <DetectChar attribute="string" context="backquote" char="`" beginRegion="String" />

                <!-- comments and doxygen comments -->
                <StringDetect String="/**" attribute="comment.documentation" context="MultiLineDocumentation" beginRegion="Comment"/>
                <StringDetect String="/*!" attribute="comment.documentation" context="MultiLineDocumentation" beginRegion="Comment"/>
                <Detect2Chars attribute="comment.multiLine" context="MultiLineComment" char="/" char1="*" beginRegion="Comment"/>

<!-- gerexps generated automatically: start -->
<RegExpr String="([$][1-9][0-9]*)" attribute="constant"/>
<RegExpr String="([$]{2})" attribute="constant"/>
<RegExpr String="([$]#)" attribute="constant"/>
<RegExpr String="#.*$" attribute="comment.line" minimal="true"/>
<RegExpr String="/\*.*\*/" attribute="comment.block" minimal="true"/>
<RegExpr String="^(%[a-z]+(-[a-z]+)+)(.*)$" attribute="meta"/>
<RegExpr String="^(%[a-z]+)(.*)$" attribute="meta"/>
<RegExpr String="(=~)\s*(/).*(?:(?:\\\\)|(?:\\/)|[^\/])*(/)([imsx]*)" attribute="string.regexp" minimal="true"/>
<RegExpr String="(!~)\s*(/).*(?:(?:\\\\)|(?:\\/)|[^\/])*(/)([imsx]*)" attribute="string.regexp" minimal="true"/>
<RegExpr String="(=~)\s*(x/).*(?:(?:\\\\)|(?:\\/)|[^\/])*(/)([imsxg]*)" attribute="string.regexp" minimal="true"/>
<RegExpr String="(=~)\s*(s/).*(?:(?:\\\\)|(?:\\/)|[^\/])*(/)(?:(?:\\\\)|(?:\\/)|[^\/])*(/)([imsxg]*)" attribute="string.regexp" minimal="true"/>
<RegExpr String="(=~)\s*(tr/).*(?:(?:\\\\)|(?:\\/)|[^\/])*(/)(?:(?:\\\\)|(?:\\/)|[^\/])*(/)([imsxg]*)" attribute="string.regexp" minimal="true"/>
<RegExpr String="&lt;([0-9A-Fa-f][0-9A-Fa-f])+&gt;" attribute="constant"/>
<RegExpr String="\b(break|case|continue|default|do|else|for(each)?|if|in|return|switch|thread_exit|while)\b" attribute="keyword"/>
<RegExpr String="\b(try|catch|throw|rethrow)\b" attribute="keyword"/>
<RegExpr String="\b(on_exit|on_error|on_success)\b" attribute="keyword"/>
<RegExpr String="\b(by|context|sortBy|sortDescendingBy|subcontext|summarize|where)\b" attribute="keyword"/>
<RegExpr String="\b(background|chomp|elements|exists|extract|foldl|foldr|instanceof|keys|map|pop|push|remove|select|splice|shift|trim|unshift)\b" attribute="keyword.operator"/>
<RegExpr String="\bnew\b" attribute="keyword.operator"/>
<RegExpr String="\bdelete\b" attribute="keyword.operator"/>
<RegExpr String="\bcast\b" attribute="keyword.operator"/>
<RegExpr String="\?|:" attribute="keyword"/>
<RegExpr String="(&lt;&lt;|&gt;&gt;&gt;?|\^)" attribute="keyword.operator"/>
<RegExpr String="((&amp;|\^|\||&lt;&lt;|&gt;&gt;)=)" attribute="keyword.operator"/>
<RegExpr String="(===?|!==?|&lt;=|&gt;=|&lt;=&gt;|&lt;|&gt;)" attribute="keyword.operator"/>
<RegExpr String="([+*/%-]=)" attribute="keyword.operator"/>
<RegExpr String="(=)" attribute="keyword.operator"/>
<RegExpr String="(:=)" attribute="keyword.operator"/>
<RegExpr String="(\-\-|\+\+)" attribute="keyword.operator"/>
<RegExpr String="(\-|\+|\*|\/|%)" attribute="keyword.operator"/>
<RegExpr String="(!|&amp;&amp;|\|\|)" attribute="keyword.operator"/>
<RegExpr String="(\||&amp;)" attribute="keyword.operator"/>
<RegExpr String=";" attribute="punctuation"/>
<RegExpr String="(&amp;amp;|&amp;lt;|&amp;gt;)" attribute="constant"/>
<RegExpr String="(&amp;amp;|&amp;lt;|&amp;gt;)" attribute="constant"/>
<RegExpr String="\b([0-9]{4})-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))(T(([01][0-9])|(2[0-3]))(:[0-5][0-9])(:[0-5][0-9](\.[0-9]{1,6})?)?)(Z|([+-][01][0-9](:[0-5][0-9](:[0-5][0-9])?)?))?\b" attribute="constant"/>
<RegExpr String="\b([0-9]{4})-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))(-(([01][0-9])|(2[0-3]))(:[0-5][0-9])(:[0-5][0-9])(\.[0-9]{1,6})?)(Z|([+-][01][0-9](:[0-5][0-9](:[0-5][0-9])?)?))?\b" attribute="constant"/>
<RegExpr String="\b([0-9]{4})-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))(Z|([+-][01][0-9](:[0-5][0-9](:[0-5][0-9])?)?))?\b" attribute="constant"/>
<RegExpr String="\b(([01][0-9])|(2[0-3]))(:[0-5][0-9])(:[0-5][0-9](\.[0-9]{1,6})?)?(Z|([+-][01][0-9](:[0-5][0-9](:[0-5][0-9])?)?))?\b" attribute="constant"/>
<RegExpr String="\b[0-9]+(D|M|Y|h|m|ms|s|us)\b" attribute="constant"/>
<RegExpr String="\bP(-?[0-9]+[YMD])+T(-?[0-9]+[HMSu])+\b" attribute="constant"/>
<RegExpr String="\bP(-?[0-9]+[YMDHSu])+\b" attribute="constant"/>
<RegExpr String="\bPT(-?[0-9]+[HMSu])+\b" attribute="constant"/>
<RegExpr String="\bP[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]{1,6})?)?)?\b" attribute="constant"/>
<RegExpr String="\bP(T)?[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]{1,6})?)?\b" attribute="constant"/>
<RegExpr String="\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(n)?\b" attribute="constant"/>
<RegExpr String="\bTrue\b" attribute="constant"/>
<RegExpr String="\bFalse\b" attribute="constant"/>
<RegExpr String="\bNOTHING\b" attribute="constant"/>
<RegExpr String="\bNULL\b" attribute="constant"/>
<RegExpr String="\b(NT_(BINARY|BOOLEAN|CALLREF|CLOSURE|DATE|FLOAT|INT|HASH|LIST|NOTHING|NULL|NUMBER|OBJECT|STRING))\b" attribute="constant"/>
<RegExpr String="\bclass\b" attribute="storage"/>
<RegExpr String="\bconst\b" attribute="storage"/>
<RegExpr String="\bhashdecl\b" attribute="storage"/>
<RegExpr String="\bmodule\b" attribute="storage"/>
<RegExpr String="\bnamespace\b" attribute="storage"/>
<RegExpr String="\bsub\b" attribute="storage"/>
<RegExpr String="\b(inherits|returns)\b" attribute="storage"/>
<RegExpr String="\b(binary|bool|date|float|hash|int|list|number|string)\b" attribute="storage"/>
<RegExpr String="\b(softbool|softdate|softfloat|softhash|softint|softlist|softnumber|softstring)\b" attribute="storage"/>
<RegExpr String="\bany\b" attribute="storage"/>
<RegExpr String="\b(callref|closure|code)\b" attribute="storage"/>
<RegExpr String="\bdata\b" attribute="storage"/>
<RegExpr String="\bnothing\b" attribute="storage"/>
<RegExpr String="\bnull\b" attribute="storage"/>
<RegExpr String="\bobject\b" attribute="storage"/>
<RegExpr String="\breference\b" attribute="storage"/>
<RegExpr String="\btimeout\b" attribute="storage"/>
<RegExpr String="\b(deprecated|final|public)\b" attribute="storage"/>
<RegExpr String="\b(private:hierarchy|private:internal)\b" attribute="storage"/>
<RegExpr String="\b(abstract|deprecated|final|public|private|static|synchronized)\b" attribute="storage"/>
<RegExpr String="\b(deprecated|final|my|our|public|private|static)\b" attribute="storage"/>
<RegExpr String="\b(Platform|PlatformOS|PlatformCPU)\b" attribute="support"/>
<RegExpr String="\b(Build|BuildHost|Compiler|CFLAGS|LDFLAGS|MACHINE_MSB)\b" attribute="support"/>
<RegExpr String="\b(VersionString|VersionMajor|VersionMinor|VersionSub)\b" attribute="support"/>
<RegExpr String="\b(stdin|stdout|stderr|stdin_stream|stdout_stream|stderr_stream)\b" attribute="support"/>
<RegExpr String="\b(PathSep|DirSep)\b" attribute="support"/>
<RegExpr String="([a-zA-Z_][a-zA-Z0-9_]*)\s*(?=\()" attribute="meta"/>
<!-- gerexps generated automatically: end -->
            </context>

            <context name="MultiLineComment" attribute="multiline.comment" lineEndContext="#stay">
                <LineContinue attribute="multiline.comment" context="#pop"/>
                <Detect2Chars attribute="multiline.comment" context="#pop" char="*" char1="/" endRegion="Comment"/>
        </context>

        <context name="MultiLineDocumentation" attribute="comment.block.documentation" lineEndContext="#stay">
            <IncludeRules context="##Doxygen"/>
            <LineContinue attribute="comment.block.documentation" context="#pop"/>
            <Detect2Chars attribute="comment.block.documentation" context="#pop" char="*" char1="/" endRegion="Comment"/>
        </context>

        <context name="string" attribute="string" lineEndContext="#stay">
            <LineContinue attribute="string" context="#stay"/>
            <Detect2Chars attribute="string" context="#stay" char="\" char1="\" />
            <Detect2Chars attribute="string" context="#stay" char="\" char1="'" />
            <Detect2Chars attribute="string" context="#stay" char="\" char1="&quot;" />
            <DetectChar attribute="string" context="#pop" char="&quot;" endRegion="String" />
        </context>

        <context name="simple_string" attribute="string" lineEndContext="#stay">
            <LineContinue attribute="string" context="#stay"/>
            <DetectChar attribute="string" context="#pop" char="'" endRegion="String" />
        </context>

        <context name="backquote" attribute="string" lineEndContext="#stay">
            <LineContinue attribute="string" context="#stay"/>
            <DetectChar attribute="string" context="#pop" char="`"/>
        </context>
    </contexts>

    <itemDatas>
<!-- mapping generated automatically: start -->
<itemData name="comment" defStyleNum="dsComment"/>
<itemData name="comment.block" defStyleNum="dsComment"/>
<itemData name="comment.block.documentation" defStyleNum="dsDocumentation"/>
<itemData name="comment.line" defStyleNum="dsComment"/>
<itemData name="constant" defStyleNum="dsConstant"/>
<itemData name="entity" defStyleNum="dsAnnotation"/>
<itemData name="keyword" defStyleNum="dsKeyword"/>
<itemData name="keyword.operator" defStyleNum="dsOperator"/>
<itemData name="markup" defStyleNum="dsAnnotation"/>
<itemData name="meta" defStyleNum="dsBuiltIn"/>
<itemData name="storage" defStyleNum="dsKeyword"/>
<itemData name="string" defStyleNum="dsString"/>
<itemData name="string.regexp" defStyleNum="dsSpecialChar"/>
<itemData name="support" defStyleNum="dsBuiltIn"/>
<itemData name="punctuation" defStyleNum="dsNormal"/>
<!-- mapping generated automatically: end -->
    </itemDatas>

    </highlighting>
    <general>
        <comments>
            <comment name="singleLine" start="#"/>
            <comment name="multiLine" start="/*" end="*/"/>
        </comments>
        <keywords casesensitive="1"/>
    </general>

</language>

